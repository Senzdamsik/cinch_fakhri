steps:
  # Step 1: Validate Service Account Key with Enhanced Error Handling
  - id: 'fetch-sa-key'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Fetch service account key with error handling
        gcloud secrets versions access latest --secret=sa-key > /workspace/sa-key.json || exit 1
        
        # Validate JSON structure with a simple check
        if [ ! -s /workspace/sa-key.json ]; then
          echo "ERROR: Service account key file is empty!"
          exit 1
        fi
        
        # Check for valid JSON format using Python
        python3 -c "import json; json.load(open('/workspace/sa-key.json'))" || { echo "ERROR: Service account key file is not valid JSON!"; exit 1; }
        
        if ! grep -q "client_email" /workspace/sa-key.json; then
          echo "ERROR: Invalid service account key file!"
          exit 1
        fi
        
        # Print out the client email for verification
        echo "Service Account Client Email:"
        grep -o '"client_email": *"[^"]*"' /workspace/sa-key.json
        
        # Ensure correct permissions
        chmod 644 /workspace/sa-key.json
    waitFor: ['-']

  # Step 2: Fetch Database Password Only
  - id: 'fetch-db-password'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --secret=DB_PASSWORD > /workspace/db_password.txt
        # Use hardcoded values for non-sensitive configuration
        echo "35.240.241.62" > /workspace/db_host.txt
        echo "postgres" > /workspace/db_user.txt
        echo "test_cinch" > /workspace/db_name.txt
    waitFor: ['-']

  # Step 3: Cloud SQL Proxy Setup
  - id: 'cloud-sql-proxy'
    name: 'gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.1.0'
    args:
      - '--credentials-file=/workspace/sa-key.json'
      - '--port=5432'
      - 'speedy-area-192702:asia-southeast1:test-cinch'
    waitFor: ['-']

  # Step 4: Build Application Image
  - id: 'build-app-image'
    name: 'docker'
    args:
      - 'build'
      - '-t'
      - 'asia-southeast1-docker.pkg.dev/speedy-area-192702/cinch-fakhri-repo/app:${SHORT_SHA}'
      - '.'
    waitFor: ['-']

  # Step 5: Push Image to Artifact Registry
  - id: 'push-app-image'
    name: 'docker'
    args:
      - 'push'
      - 'asia-southeast1-docker.pkg.dev/speedy-area-192702/cinch-fakhri-repo/app:${SHORT_SHA}'
    waitFor: ['build-app-image']

  # Step 6: Deploy to Cloud Run
  - id: 'deploy-to-cloud-run'
    name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'cinch-fakhri-service'
      - '--image'
      - 'asia-southeast1-docker.pkg.dev/speedy-area-192702/cinch-fakhri-repo/app:${SHORT_SHA}'
      - '--region'
      - 'asia-southeast1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--add-cloudsql-instances'
      - 'speedy-area-192702:asia-southeast1:test-cinch'
      - '--set-secrets'
      - 'POSTGRES_PASSWORD=DB_PASSWORD:latest'
      - '--set-env-vars'
      - 'DATABASE_URL=postgresql://postgres:$(DB_PASSWORD)@/test_cinch?host=/cloudsql/speedy-area-192702:asia-southeast1:test-cinch,POSTGRES_USER=postgres,POSTGRES_DB=test_cinch,POSTGRES_HOST=/cloudsql/speedy-area-192702:asia-southeast1:test-cinch'
    waitFor: ['push-app-image']

options:
  logging: CLOUD_LOGGING_ONLY 