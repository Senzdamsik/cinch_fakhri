steps:
  # Step 1: Validate Service Account Key with Enhanced Error Handling
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - >
        gcloud secrets versions access latest --secret=sa-key > /workspace/sa-key.json || exit 1
        &&
        python3 -c "
import json
import sys

try:
    with open('/workspace/sa-key.json', 'r') as f:
        data = json.load(f)
        if not data.get('client_email'):
            print('Invalid service account key')
            sys.exit(1)
        print(f'Validated service account: {data.get(\"client_email\")}')
except json.JSONDecodeError:
    print('Invalid JSON in service account key')
    sys.exit(1)
" || exit 1
        &&
        chmod 600 /workspace/sa-key.json

  # Step 2: Fetch all secrets from Secret Manager
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Fetching secrets..."
        gcloud secrets versions access latest --secret=DB_PASSWORD > /workspace/db_password.txt
        gcloud secrets versions access latest --secret=DB_USER > /workspace/db_user.txt
        gcloud secrets versions access latest --secret=DB_HOST > /workspace/db_host.txt

  # Step 3: Run Database Migrations
  - name: 'docker'
    args:
      - 'build'
      - '-t'
      - 'migration-image'
      - '-f'
      - 'Dockerfile.migration'
      - '.'
    
  - name: 'migration-image'
    env:
      - 'DATABASE_URL=postgresql://$(cat /workspace/db_user.txt):$(cat /workspace/db_password.txt)@$(cat /workspace/db_host.txt):5432/test_cinch'

  # Step 4: Cloud SQL Proxy Setup
  - name: 'gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.1.0'
    id: 'cloud-sql-proxy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cloud-sql-proxy \
          --credentials-file=/workspace/sa-key.json \
          --port=5432 \
          speedy-area-192702:asia-southeast1:test-cinch
    wait_for: ['migration-image']

  # Step 5: Database Seeding
  - name: 'docker'
    args:
      - 'build'
      - '-t'
      - 'db-seed-image'
      - '-f'
      - 'Dockerfile.db-seed'
      - '.'
    
  - name: 'db-seed-image'
    env:
      - 'PGHOST=localhost'
      - 'PGPORT=5432'
      - 'PGUSER=$(cat /workspace/db_user.txt)'
      - 'PGDATABASE=test_cinch'
      - 'PGPASSWORD=$(cat /workspace/db_password.txt)'

  # Step 6: Build Application Image
  - name: 'docker'
    args:
      - 'build'
      - '-t'
      - 'asia-southeast1-docker.pkg.dev/${PROJECT_ID}/cinch-fakhri-repo/app:${SHORT_SHA}'
      - '.'

  # Step 7: Push Image to Artifact Registry
  - name: 'docker'
    args:
      - 'push'
      - 'asia-southeast1-docker.pkg.dev/${PROJECT_ID}/cinch-fakhri-repo/app:${SHORT_SHA}'

  # Step 8: Deploy to Cloud Run with secrets as environment variables
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'cinch-fakhri-service'
      - '--image'
      - 'asia-southeast1-docker.pkg.dev/${PROJECT_ID}/cinch-fakhri-repo/app:${SHORT_SHA}'
      - '--region'
      - 'asia-southeast1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--add-cloudsql-instances'
      - 'speedy-area-192702:asia-southeast1:test-cinch'
      - '--set-env-vars'
      - 'DATABASE_URL=postgresql://$(cat /workspace/db_user.txt):$(cat /workspace/db_password.txt)@/test_cinch?host=/cloudsql/speedy-area-192702:asia-southeast1:test-cinch'
      - '--set-env-vars'
      - 'DB_USER=$(cat /workspace/db_user.txt)'
      - '--set-env-vars'
      - 'DB_PASSWORD=$(cat /workspace/db_password.txt)'
      - '--set-env-vars'
      - 'DB_HOST=$(cat /workspace/db_host.txt)'

options:
  logging: CLOUD_LOGGING_ONLY 